---
title: "Spatial Networks"
author: "Ivan Lopez"
format: html
editor: visual
---

Fatality

```{r}
data
acled_data = data
```

```{r}

# Count occurrences of each source
source_counts <- table(data$source)

# Sort in decreasing order
source_counts_sorted <- sort(source_counts, decreasing = TRUE)

# Get the top 10
top_10_sources <- head(source_counts_sorted, 10)

# Create a pie chart for the top 10 sources
pie(top_10_sources, main = "Top 10 Sources", col = rainbow(length(top_10_sources)),
    labels = names(top_10_sources), cex = 0.8)

# Add a legend
legend("topright", legend = names(top_10_sources), fill = rainbow(length(top_10_sources)), cex = 0.5)


```

```{r}
top_10_days <- daily_fatalities %>%
  arrange(desc(fatalities)) %>%
  head(10)

# Plot top 10 days with most fatalities
ggplot(top_10_days, aes(x = reorder(event_date, fatalities), y = fatalities)) +
  geom_bar(stat = "identity") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(x = "Date", y = "Fatalities", title = "Top 10 Days for Most Fatalities")
```

```{r}
# Calculate the difference in fatalities from the previous day
daily_fatalities <- daily_fatalities %>%
  mutate(fatality_difference = fatalities - lag(fatalities))

# Remove the first row, which will have NA for the difference
daily_fatalities <- daily_fatalities[-1,]

# Get the top 5 days with the greatest changes in fatalities
top_5_diff <- daily_fatalities %>%
  arrange(desc(abs(fatality_difference))) %>%
  head(5)

# Print the dates of the top 5 days with greatest changes
top_5_dates <- format(top_5_diff$event_date, '%d-%b-%Y')
cat("Top 5 Dates With Greatest Changes in Fatalities:\n")
print(top_5_dates)

```

```{r}
actor_counts <- table(data$actor1)

# Sort in decreasing order
actor_counts_sorted <- sort(actor_counts, decreasing = TRUE)

# Get the top 10
top_10_actors <- head(actor_counts_sorted, 10)

# Start png device
#png(filename = "Top10Actors.png", width = 800, height = 600)

# Create a pie chart for the top 10 actors
pie(top_10_actors, main = "Top 10 Actors", col = rainbow(length(top_10_actors)),
    labels = names(top_10_actors), cex = 0.8)

# Add a legend
legend("topright", legend = names(top_10_actors), fill = rainbow(length(top_10_actors)), cex = 0.8)
```

```{r}
# Group data by year and calculate the sum of fatalities for each year
yearly_fatalities <- data %>%
  group_by(year) %>%
  summarise(fatalities = sum(fatalities))

# Plot the yearly fatalities
ggplot(yearly_fatalities, aes(x = year, y = fatalities)) + 
  geom_bar(stat = "identity", fill = "steelblue") + 
  theme_minimal() + 
  labs(x = "Year", y = "Fatalities", title = "Yearly Fatalities")


```

```{r}
ggplot(yearly_fatalities, aes(x = as.factor(year), y = fatalities)) + 
  geom_bar(stat = "identity", fill = "steelblue") + 
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
  labs(x = "Year", y = "Fatalities", title = "Yearly Fatalities") +
  scale_y_continuous(limits = c(0, 30000))
```

```{r}
library(ggplot2)
library(dplyr)


# Filter data for interventions by "Military Forces of Turkey (2016-)"
turkey_interventions <- data %>%
  filter(actor1 == "Military Forces of Turkey (2016-)")

# Group data by year and calculate the frequency ratio
interventions_by_year <- turkey_interventions %>%
  group_by(year) %>%
  summarise(frequency_ratio = n())

# Plot the bar plot
# Set a larger figure size
options(repr.plot.width = 10, repr.plot.height = 6)

# Plot the bar plot with adjusted x-axis labels
# Plot the bar plot with adjusted x-axis labels
ggplot(interventions_by_year, aes(x = as.factor(year), y = frequency_ratio)) +
  geom_bar(stat = "identity", fill = "steelblue") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(x = "Year", y = "Number of Battles ", title = "Interventions by Military Forces of Turkey (2016-)")
```

```{r}
# Save the plot as a PNG file
ggsave("InterventionsPlot.png", plot = last_plot(), width = 10, height = 6)

```

```{r}

library(dplyr)
library(ggplot2)

library(dplyr)
library(ggplot2)

# Filter the data for "Military Forces of Turkey (2016-)"
military_turkey <- data %>%
  filter(actor1 == "Military Forces of Turkey (2016-)")

# Group the filtered data by year and count the occurrences
frequency_ratio <- military_turkey %>%
  group_by(year) %>%
  summarise(freq_ratio = n() / nrow(data[data$year == year, ]))

# Plot the frequency ratio
# Plot the frequency ratio with all years displayed on the x-axis
ggplot(frequency_ratio, aes(x = year, y = freq_ratio)) +
  geom_line(color = "steelblue", size = 1.2) +
  theme_minimal() +
  theme(panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        panel.border = element_blank(),
        axis.line = element_line(color = "black"),
        axis.text = element_text(color = "black", size = 12),
        axis.title = element_text(color = "black", size = 14, face = "bold"),
        plot.title = element_text(size = 16, face = "bold"),
        legend.position = "none") +
  labs(x = "Year", y = "Frequency Ratio",
       title = "Frequency Ratio of 'Military Forces of Turkey (2016-)' over the Years") +
  scale_x_continuous(breaks = unique(frequency_ratio$year), labels = unique(frequency_ratio$year))







```

```{r}
library(dplyr)
library(ggplot2)
library(scales)

# Calculate the frequency of each sub-event type
subevent_counts <- data %>%
  count(sub_event_type)

# Sort the sub-event types by frequency in descending order
subevent_counts <- subevent_counts[order(-subevent_counts$n), ]

# Select the top 10 sub-event types
top_10_subevents <- head(subevent_counts, 10)

# Calculate the percentage share
top_10_subevents <- mutate(top_10_subevents, percentage = n / sum(n) * 100)

# Round the percentage to two decimal places
top_10_subevents$percentage <- round(top_10_subevents$percentage, 2)

# Create a pie chart with percentage labels
ggplot(top_10_subevents, aes(x = "", y = n, fill = sub_event_type)) +
  geom_bar(stat = "identity", width = 1) +
  coord_polar("y", start = 0) +
  theme_void() +
  labs(fill = "Disorder Types", title = "Share of Disorder Types") +
  geom_text(aes(label = paste0(percentage, "%")), position = position_stack(vjust = 0.5))


```

```{r}
library(dplyr)
library(ggplot2)
library(scales)

# Calculate the frequency of each sub-event type
subevent_counts <- data %>%
  count(sub_event_type)

# Sort the sub-event types by frequency in descending order
subevent_counts <- subevent_counts[order(-subevent_counts$n), ]

# Select the top 10 sub-event types
top_10_subevents <- head(subevent_counts, 10)

# Calculate the percentage share
top_10_subevents <- mutate(top_10_subevents, percentage = n / sum(n))

# Round the percentage values to two decimal places
top_10_subevents$percentage <- round(top_10_subevents$percentage, 2)

# Create a pie chart with percentage labels
ggplot(top_10_subevents, aes(x = "", y = n, fill = sub_event_type)) +
  geom_bar(stat = "identity", width = 1) +
  coord_polar("y", start = 0) +
  theme_void() +
  labs(fill = "Disorder Types", title = "Share of Disorder Types") +
  geom_text(aes(label = paste0(percent(percentage), "%")), position = position_stack(vjust = 0.5))

```

```{r}
library(dplyr)
library(ggplot2)
library(scales)

# Calculate the frequency of each sub-event type
subevent_counts <- data %>%
  count(sub_event_type)

# Sort the sub-event types by frequency in descending order
subevent_counts <- subevent_counts[order(-subevent_counts$n), ]

# Select the top 10 sub-event types
top_10_subevents <- head(subevent_counts, 10)

# Calculate the percentage share
top_10_subevents <- mutate(top_10_subevents, percentage = n / sum(n))

# Round the percentage values to two decimal places
top_10_subevents$percentage <- round(top_10_subevents$percentage, 2)

# Create a pie chart with percentage labels
ggplot(top_10_subevents, aes(x = "", y = n, fill = sub_event_type)) +
  geom_bar(stat = "identity", width = 1) +
  coord_polar("y", start = 0) +
  theme_void() +
  labs(fill = "Disorder Types", title = "Share of Disorder Types") +
  geom_text(aes(label = paste0(percent(percentage), "%")), position = position_stack(vjust = 0.5))

```

```{r}
library(dplyr)
library(ggplot2)
library(scales)

# Calculate the frequency of each sub-event type
subevent_counts <- data %>%
  count(sub_event_type)

# Sort the sub-event types by frequency in descending order
subevent_counts <- subevent_counts[order(-subevent_counts$n), ]

# Select the top 10 sub-event types
top_10_subevents <- head(subevent_counts, 10)

# Calculate the percentage share
top_10_subevents <- mutate(top_10_subevents, percentage = n / sum(n) * 100)

# Round the percentage to two decimal places
top_10_subevents$percentage <- round(top_10_subevents$percentage, 2)

# Create a pie chart with percentage labels and black background
ggplot(top_10_subevents, aes(x = "", y = n, fill = sub_event_type)) +
  geom_bar(stat = "identity", width = 1) +
  coord_polar("y", start = 0) +
  theme_void() +
  theme(panel.background = element_rect(fill = "black"),
        plot.background = element_rect(fill = "black"),
        plot.title = element_text(color = "white"),
        legend.text = element_text(color = "white"),
        legend.title = element_text(color = "white")) +
  labs(fill = "Disorder Types", title = "Share of Disorder Types") +
  geom_text(aes(label = paste0(percentage, "%")), position = position_stack(vjust = 0.5),
            color = "white")
```

```{r}
library(dplyr)
library(ggplot2)
library(scales)

# Filter the data for actors against "Military Forces of Turkey (2016-)"
against_actors <- data %>%
  filter(actor2 == "Military Forces of Turkey (2016-)")

# Count the occurrences of each actor1
actor_counts <- against_actors %>%
  count(actor1)

# Sort the actors by frequency in descending order
actor_counts <- actor_counts[order(-actor_counts$n), ]

# Select the top 10 actors
top_10_actors <- head(actor_counts, 5)

# Create a pie chart for the top 10 actors
ggplot(top_10_actors, aes(x = "", y = n, fill = actor1)) +
  geom_bar(stat = "identity", width = 1) +
  coord_polar("y", start = 0) +
  theme_void() +
  labs(fill = "Actors", title = "Top Actors Against 'Military Forces of Turkey (2016-)") +
  geom_text(aes(label = percent(n / sum(n))), position = position_stack(vjust = 0.5))


```

```{r}
# Calculate the total fatalities for each actor
actor_fatalities <- data %>%
  group_by(actor1) %>%
  summarise(total_fatalities = sum(fatalities)) %>%
  arrange(desc(total_fatalities)) %>%
  top_n(10)

# Create a bar plot of the top 10 actors contributing to fatalities
# Create a bar plot of the top 10 actors contributing to fatalities with 5k interval on y-axis
ggplot(actor_fatalities, aes(x = reorder(actor1, -total_fatalities), y = total_fatalities)) +
  geom_bar(stat = "identity", fill = "steelblue") +
  theme_minimal() +
  labs(x = "Actor", y = "Total Fatalities", title = "Top 10 Actors Contributing to Fatalities") +
  coord_flip() +
  scale_y_continuous(breaks = seq(0, max(actor_fatalities$total_fatalities), 5000))


```
